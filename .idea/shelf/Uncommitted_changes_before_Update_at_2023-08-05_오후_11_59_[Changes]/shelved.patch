Index: app/src/main/java/com/surround2023/surround2023/user_login_join/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.surround2023.surround2023.user_login_join\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.activity.ComponentActivity\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.kakao.sdk.auth.AuthApiClient\r\nimport com.kakao.sdk.auth.model.OAuthToken\r\nimport com.kakao.sdk.common.model.ClientError\r\nimport com.kakao.sdk.common.model.ClientErrorCause\r\nimport com.kakao.sdk.common.model.KakaoSdkError\r\nimport com.kakao.sdk.user.UserApi\r\nimport com.kakao.sdk.user.UserApiClient\r\nimport com.surround2023.surround2023.databinding.ActivityLoginBinding\r\nimport com.surround2023.surround2023.home.HomeActivity\r\nimport com.google.firebase.firestore.IgnoreExtraProperties\r\n\r\n@IgnoreExtraProperties\r\ndata class User(\r\n    val Email: String? = null,\r\n    val uid: String? = null,\r\n    val userName: String? = null,\r\n    val gender: String? = null\r\n)\r\n\r\nclass LoginActivity : ComponentActivity() {\r\n\r\n    private lateinit var binding: ActivityLoginBinding\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        val join_intent = Intent(this, JoinActivity::class.java) //가입 화면\r\n        val home_intent = Intent(this, HomeActivity::class.java)\r\n\r\n        val db = FirebaseFirestore.getInstance()\r\n        val collectionRef = db.collection(\"User\")\r\n\r\n        binding.btnLogin.setOnClickListener{\r\n            val email = binding.Email.text.toString()\r\n            val password = binding.PW.text.toString()\r\n            FirebaseAuth.getInstance().signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this) { task ->\r\n                    if (task.isSuccessful) {\r\n                        // 로그인에 성공한 경우 사용자 정보를 확인하거나 화면을 전환하는 등의 작업 수행\r\n                        collectionRef.document(email).get()\r\n                            .addOnSuccessListener { document ->\r\n                                if (document != null && document.exists()) {\r\n                                    // 문서가 존재하고 데이터를 읽어올 수 있는 경우\r\n                                    val data = document.data\r\n                                    Log.d(\"datasurround123\", data.toString())\r\n                                    startActivity(home_intent)\r\n                                } else {\r\n                                    // 문서가 존재하지 않거나 데이터를 읽어오는 데에 실패한 경우\r\n                                    Toast.makeText(this@LoginActivity,\r\n                                        \"로그인에 실패하였습니다. 다시 시도해 주세요.\",\r\n                                        Toast.LENGTH_SHORT\r\n                                    ).show()\r\n                                }\r\n                            }\r\n                            .addOnFailureListener { exception ->\r\n                                // 데이터를 읽어오는 데에 실패한 경우\r\n                                Toast.makeText(this@LoginActivity,\r\n                                    \"로그인에 실패하였습니다. 다시 시도해 주세요.\",\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            }\r\n                    } else {\r\n                        // 로그인에 실패한 경우\r\n                        Toast.makeText(this@LoginActivity,\r\n                            \"이메일과 비밀번호를 다시 확인해 주세요.\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n                    }\r\n                }\r\n\r\n        }\r\n        binding.KakaoLoginButton.setOnClickListener {\r\n            kakaoLogin()\r\n        }\r\n\r\n        binding.btnJoin.setOnClickListener {\r\n            startActivity(join_intent)\r\n        }\r\n    }\r\n    private fun kakaoLogin() {\r\n        val mCallback: (OAuthToken?, Throwable?) -> Unit = { token, error ->\r\n            if (error != null) {\r\n                Log.e(TAG, \"로그인 실패 $error\")\r\n            } else if (token != null) {\r\n                Log.e(TAG, \"로그인 성공 ${token.accessToken}\")\r\n            }\r\n        }\r\n        // 카카오톡 설치 확인\r\n        if (UserApiClient.instance.isKakaoTalkLoginAvailable(this)) {\r\n            // 카카오톡 로그인\r\n            UserApiClient.instance.loginWithKakaoTalk(this) { token, error ->\r\n                // 로그인 실패 부분\r\n                if (error != null) {\r\n                    Log.e(TAG, \"로그인 실패 $error\")\r\n                    // 사용자가 취소\r\n                    if (error is ClientError && error.reason == ClientErrorCause.Cancelled ) {\r\n                        return@loginWithKakaoTalk\r\n                    }\r\n                    // 다른 오류\r\n                    else {\r\n                        UserApiClient.instance.loginWithKakaoAccount(this, callback = mCallback) // 카카오 이메일 로그인\r\n                    }\r\n                }\r\n                // 로그인 성공 부분\r\n                else if (token != null) {\r\n                    Log.e(TAG, \"로그인 성공 ${token.accessToken}\")\r\n                    val home_intent = Intent(this, HomeActivity::class.java)\r\n                    startActivity(home_intent)\r\n                }\r\n            }\r\n        } else {\r\n            UserApiClient.instance.loginWithKakaoAccount(this, callback = mCallback) // 카카오 이메일 로그인\r\n        }\r\n        if (AuthApiClient.instance.hasToken()) {\r\n            UserApiClient.instance.accessTokenInfo { _, error ->\r\n                if (error != null) {\r\n                    if (error is KakaoSdkError && error.isInvalidTokenError() == true) {\r\n                        //로그인 필요\r\n                    }\r\n                    val home_intent = Intent(this, HomeActivity::class.java)\r\n                    startActivity(home_intent)\r\n                }\r\n            }\r\n        }\r\n        UserApiClient.instance.me { user, error ->\r\n            if (error != null) {\r\n                Log.e(TAG, \"사용자 정보 요청 실패 $error\")\r\n            } else if (user != null) {\r\n                Log.e(TAG, \"사용자 정보 요청 성공 : $user\")\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/surround2023/surround2023/user_login_join/LoginActivity.kt b/app/src/main/java/com/surround2023/surround2023/user_login_join/LoginActivity.kt
--- a/app/src/main/java/com/surround2023/surround2023/user_login_join/LoginActivity.kt	(revision 96e3ca0ca322d7440256d1b3571f2605f0551a23)
+++ b/app/src/main/java/com/surround2023/surround2023/user_login_join/LoginActivity.kt	(date 1691247439596)
@@ -13,12 +13,10 @@
 import com.kakao.sdk.common.model.ClientError
 import com.kakao.sdk.common.model.ClientErrorCause
 import com.kakao.sdk.common.model.KakaoSdkError
-import com.kakao.sdk.user.UserApi
 import com.kakao.sdk.user.UserApiClient
 import com.surround2023.surround2023.databinding.ActivityLoginBinding
 import com.surround2023.surround2023.home.HomeActivity
 import com.google.firebase.firestore.IgnoreExtraProperties
-
 @IgnoreExtraProperties
 data class User(
     val Email: String? = null,
